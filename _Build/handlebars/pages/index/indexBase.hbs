{{> header homepage=true}}

{{> banner title="Home" content="A site about nothing useful at all"}}

<main class="container ut-padding">
	<div class="innerContainer ut-highlight--reverse">
		<nav class="ut-tableChildren ut-tableFixed ut-tableSpacing ut-mobileFullChildren ut-marginTop">
			{{#each index.callouts}}
				{{#with (findObjectInArray object=this in=@root.global.navigation key="url")}}
					{{> callout 
						callout--url=url
						callout--icon=icon
						callout--name=name
						callout--text=text
					}}
				{{/with}}
			{{/each}}
		</nav>

		<div class="contentContainer">
			<section>
				<h3 class="divider">Latest workout</h3>
				<section>
					<div class="ut-tableChildren ut-tableFixed siteStatus">
						<div>
							<h4>Total sets</h4>
							<p class="d3-totalSets"></p>
						</div>
						<div>
							<h4>Total reps</h4>
							<p class="d3-totalReps"></p>
						</div>
						<div>
							<h4>Total volume</h4>
							<p class="d3-totalVolume"></p>
						</div>
						<div>
							<h4>Target Hit</h4>
							<p class="d3-tarHit"></p>
						</div>
						<div>
							<h4>Average intensity</h4>
							<p class="d3-avInt"></p>
						</div>
					</div>
					
					<table class="siteStatus table__responsive">
						<colgroup span="13"></colgroup>
						<thead>
							<tr>
								<th>Exercise</th>
								<th>1</th>
								<th>2</th>
								<th>3</th>
								<th>4</th>
								<th>5</th>
								<th>6</th>
								<th>7</th>
								<th>8</th>
								<th>9</th>
								<th>Volume</th>
								<th>Target Hit</th>
								<th>Intensity</th>
							</tr>
						</thead>
						<tbody class="d3-exercise">
						</tbody>
					</table>
				</section>
			</section>

			{{#each index.sideCallouts}}
			<section>
				<h3 class="divider">{{text}}</h3>

				{{#each charts}}
				<div class="ut-tableChildren ut-tableSpacing ut-tableFixed ut-textAlignCenter {{#unless @first}}ut-marginTop{{/unless}}">
					{{#each this}}
						<div class="callout {{#if ../../classes}}{{../../classes}}{{/if}}">
							<h4 class="ut-noMargin">{{this.exercise}}</h4>
							<p data-chart="{{this.group}}" data-exercise="{{this.exercise}}" data-key={{../../key}} class="ut-noMargin d3-text">{{{@root.global.loading}}}</p>
							<div class="async">
								{{> icon name="spin3"
									class="
										icon--small 
										icon--spin
										ut-blockCenter
									"
								}}

								{{> icon name="ok-circle"
									class="
										icon--small 
										icon--done
										ut-blockCenter
									"
								}}
							</div>
						</div>
					{{/each}}
				</div>
				{{/each}}
			</section>
			{{/each}}

			<section>
				<h3 class="divider">Latest posts</h3>
				<p class="notification notification--missing">No posts found..</p>
			</section>

			<section>
				<h3 class="divider">Website status</h3>
				{{> siteStatus}}
			</section>
		</div>
	</div>
</main>

<script type="text/javascript">
	function pageJS(){
		var index = 0;

		chartManager.charts.forEach(function(d, i){
			d3.json('media/data/' + d.name + '.json', function(err, JSON){
				if(err){
					console.log("error: ", err);
				}

				if(!chartManager.data){
					chartManager.data = {};
				}

				chartManager.data[d.name] = JSON;

				if (index++ === chartManager.charts.length - 1){ 
					dataLoaded();
				}
			});
		});
	}

	function dataLoaded(){
		var gymData = [];

		for(var key in chartManager.data){
			if(chartManager.data.hasOwnProperty(key)){
				gymData = gymData.concat(chartManager.data[key]);
			}
		}

		var gym = Gym(gymData);
		var exercises = '';
		var last = gym.last();

		last.each(function(d, i){
			exercises += '<tr>';

			exercises += '<td data-label="Exercise">' + d.exercise() + '</td>';

			var sets = d.sets().weight();
			for(var j = 0; j < 9; j++){
				exercises += '<td data-label="Set ' + (j + 1);
				if(j < sets.length){
					exercises += '">' + sets[j];
				} else {
					exercises += '" class="table__empty">'
				}
				exercises += '</td>';
			}

			exercises += '<td data-label="Volume">' + d.volume() + '</td>';

			var icon = 'cancel-circle';

			if(d.target()){
				icon = 'ok-circle';
			}

			exercises += '<td data-label="Target Hit">' + '<div class="icon icon--small"><svg><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#' + icon + '"></use></svg></div>' + '</td>';

			exercises += '<td data-label="Intensity">' + d.intensity() + '</td>';

			exercises +='</tr>';
		});

		d3.select('.d3-exercise').html(exercises);

		var delaySpeed = 200;
		var delayAdd = 200;

		createHtmlText('.d3-totalSets').attr({
				textFormat: "{value} sets", 
				delaySpeed: delaySpeed += delayAdd
			})
			.data(last.sets().length())
			.call();

		createHtmlText('.d3-totalReps').attr({
				textFormat: "{value} reps", 
				delaySpeed: delaySpeed += delayAdd
			})
			.data(last.sets().reps().reduce(function(a, b){
				return a + b;
			}, 0))
			.call();

		createHtmlText('.d3-totalVolume').attr({
				textFormat: "{value} kg", 
				delaySpeed: delaySpeed += delayAdd
			})
			.data(last.volume())
			.call();

		var icon = 'cancel-circle';

		if(last.target()){
			icon = 'ok-circle';
		}
		
		d3.select('.d3-tarHit').html('<div class="icon icon--small"><svg><use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#' + icon + '"></use></svg></div>');

		d3.select('.d3-avInt').html(last.intensity());

		d3.selectAll('.d3-text').each(function(){
			var chart = this;
			var exerciseJSON = chartManager.data[chart.dataset.chart].find(function(d, i){
				if(d.exercise === chart.dataset.exercise) {
					return true;
				}
			});

			var maxObject = Workout(exerciseJSON.sessions).max(true);

			if(chart.dataset.key === 'max'){
				createHtmlText(chart).attr({
						textFormat: "{value} kg" + " - {reps} reps", 
						delaySpeed: delaySpeed += delayAdd,
						decimalPlaces: 1,
						extraFormatKeys: [{
							name: "reps",
							value: maxObject.reps
						}]
					})
					.data(maxObject.weight)
					.call(chart);
			} else {
				var a = moment().endOf('year');
				var b = moment().today;

				maxObject.weight += (a.diff(b, 'weeks') / exerciseJSON.incInterval) * exerciseJSON.increase;

				createHtmlText(chart).attr({
						textFormat: "{value} kg", 
						delaySpeed: delaySpeed += delayAdd,
						decimalPlaces: 1
					})
					.data(2.5 * Math.round(maxObject.weight / 2.5))
					.call(chart);
			}

			setTimeout(function(){
				chart.parentNode.classList.add('async--finished');
			}, delaySpeed);
		});
	}
</script>