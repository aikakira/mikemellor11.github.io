<header class="container header header--real ut-bg1">
	<div class="innerContainer ut-tableChildren ut-mobileFullChildren ut-textAlignCenter--mobile ut-padding ut-color--reverse">
		<div class="ut-paddingRight">
			<h1 class="ut-noWrap">{{global.title}}</h1>
		</div>
		<div class="ut-fullWidth">
			<div class="ut-tableChildren ut-mobileFullChildren">
				<p class="ut-fullWidth ut-paddingRight ut-textAlignRight ut-textAlignCenter--mobile">Mike Mellor - Front end web developer / iOS developer</p>
				<div>
					<img class="gravitar ut-fullWidth" src="https://s.gravatar.com/avatar/c199be5cfdc1b7b8682712d98c68736a?s=100" alt="my ugly mug">
				</div>
			</div>
		</div>
	</div>
</header>

<div class="container header header--fake">
	<div class="innerContainer ut-tableChildren ut-mobileFullChildren ut-padding">
		<div class="ut-paddingRight">
			<h1 class="ut-noWrap">{{global.title}}</h1>
		</div>
		<div class="ut-fullWidth">
			<div class="ut-tableChildren ut-mobileFullChildren">
				<p class="ut-fullWidth ut-paddingRight">Mike Mellor - Front end web developer / iOS developer</p>
				<div>
					<img class="gravitar ut-fullWidth" src="https://s.gravatar.com/avatar/c199be5cfdc1b7b8682712d98c68736a?s=100" alt="my ugly mug">
				</div>
			</div>
		</div>
	</div>
</div>

<main class="container ut-padding">
	<div class="innerContainer index--padding ut-highlight--reverse">
		<p>Code / Gym / Sleep - a site not really about anything useful, just a place for me to track my workouts and write random bits of info that are probably wrong, doesn't stop me trying though.</p>

		<nav class="ut-tableChildren ut-tableFixed ut-tableSpacing ut-mobileFullChildren ut-marginTop">
			{{#each index.callouts}}
				{{#with (findObjectInArray object=this in=@root.global.navigation key="url")}}
					{{> callout 
						callout--url=url
						callout--icon=icon
						callout--name=name
						callout--text=text
					}}
				{{/with}}
			{{/each}}
		</nav>

		<div class="half ut-vertAlignTop ut-mobileFull">
			<h2>Latest posts</h2>
			<p class="notification notification--missing">No posts found..</p>
		</div>

		<div class="half last ut-mobileFull">
			{{#each index.sideCallouts}}
				<div>
					<h2>{{text}}</h2>
					{{#each charts}}
						<div class="ut-tableChildren ut-tableSpacing ut-tableFixed ut-textAlignCenter {{#unless @first}}ut-marginTop{{/unless}}">
							{{#if (isType this 'array')}}
								{{#each this}}
									<div class="callout {{#if ../../classes}}{{../../classes}}{{/if}}">
										<h3 class="ut-noMargin">{{this.exercise}}</h3>
										<p data-chart="{{this.group}}" data-exercise="{{this.exercise}}" data-key={{../../key}} class="ut-noMargin d3-text">{{{@root.global.loading}}}</p>
									</div>
								{{/each}}
							{{else}}
								<div class="callout {{#if ../classes}}{{../classes}}{{/if}}">
									<h3 class="ut-noMargin">{{this.exercise}}</h3>
									<p data-chart="{{this.group}}" data-exercise="{{this.exercise}}" data-key={{../key}} class="ut-noMargin d3-text">{{{@root.global.loading}}}</p>
								</div>
							{{/if}}
						</div>
					{{/each}}
				</div>
			{{/each}}
		</div>
	</div>
</main>

<script type="text/javascript">
	function pageJS(){
		var delaySpeed = 200;
		var delayAdd = 100;

		d3.selectAll('.d3-text').each(function(d, i){
			var chart = this;

			d3.json('media/data/' + this.dataset.chart + '.json', function (err, JSON) {
				if(!err){
				 	var exerciseJSON = JSON.find(function(d, i){
						if(d.exercise === chart.dataset.exercise) {
							return true;
						}
					});

					var maxObject = null;

					for(var i = 0; i < exerciseJSON.sessions.length; i++){
						for(var j = 0; j < exerciseJSON.sessions[i].sets.length; j++){
							currentObject = exerciseJSON.sessions[i].sets[j];

							if(!maxObject){
								maxObject = currentObject;
							}

							if(currentObject.weight >= maxObject.weight){
								if(currentObject.weight === maxObject.weight){
									if((currentObject.weight * currentObject.reps) > (maxObject.weight * maxObject.reps)){
										maxObject = currentObject;
									}
								} else {
									maxObject = currentObject;
								}
							}
						}
					}

					if(chart.dataset.key === 'max'){
						createHtmlText(chart).attr({
								textFormat: "{value} kg" + " - {reps} reps", 
								delaySpeed: delaySpeed += delayAdd,
								decimalPlaces: 1,
								extraFormatKeys: [{
									name: "reps",
									value: maxObject.reps
								}]
							})
							.data(maxObject.weight)
							.call(chart);
					} else {
						var a = moment().endOf('year');
						var b = moment().today;

						maxObject.weight += (a.diff(b, 'weeks') / exerciseJSON.incInterval) * exerciseJSON.increase;

						createHtmlText(chart).attr({
								textFormat: "{value} kg", 
								delaySpeed: delaySpeed += delayAdd,
								decimalPlaces: 1
							})
							.data(2.5 * Math.round(maxObject.weight / 2.5))
							.call(chart);
					}
				}
			});
		});
	}
</script>