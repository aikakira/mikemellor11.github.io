{{> header homepage=true}}

{{> banner title="Home" content="A site about nothing useful at all"}}

<main class="container ut-padding">
	<div class="innerContainer ut-highlight--reverse">
		<nav class="ut-tableChildren ut-tableFixed ut-tableSpacing ut-mobileFullChildren ut-marginTop">
			{{#each index.callouts}}
				{{#with (findObjectInArray object=this in=@root.global.navigation key="url")}}
					{{> callout 
						callout--url=url
						callout--icon=icon
						callout--name=name
						callout--text=text
					}}
				{{/with}}
			{{/each}}
		</nav>

		{{#each index.sideCallouts}}
		<div class="contentContainer">
			<h3 class="divider">{{text}}</h3>

			{{#each charts}}
			<div class="ut-tableChildren ut-tableSpacing ut-tableFixed ut-textAlignCenter {{#unless @first}}ut-marginTop{{/unless}}">
				{{#each this}}
					<div class="callout {{#if ../../classes}}{{../../classes}}{{/if}}">
						<h5 class="ut-noMargin">{{this.exercise}}</h5>
						<p data-chart="{{this.group}}" data-exercise="{{this.exercise}}" data-key={{../../key}} class="ut-noMargin d3-text">{{{@root.global.loading}}}</p>
						<div class="async">
							{{> icon name="spin3"
								class="
									icon--small 
									icon--spin
									ut-blockCenter
								"
							}}

							{{> icon name="ok-circle"
								class="
									icon--small 
									icon--done
									ut-blockCenter
								"
							}}
						</div>
					</div>
				{{/each}}
			</div>
			{{/each}}
		{{/each}}

			<h3 class="divider">Latest posts</h3>
			<p class="notification notification--missing">No posts found..</p>

			<h3 class="divider">Website status</h3>
			{{> siteStatus}}
		</div>
	</div>
</main>

<script type="text/javascript">
	function pageJS(){
		var delaySpeed = 200;
		var delayAdd = 200;

		d3.selectAll('.d3-text').each(function(d, i){
			var chart = this;

			d3.json('media/data/' + this.dataset.chart + '.json', function (err, JSON) {
				if(!err){
				 	var exerciseJSON = JSON.find(function(d, i){
						if(d.exercise === chart.dataset.exercise) {
							return true;
						}
					});

					var maxObject = null;

					for(var i = 0; i < exerciseJSON.sessions.length; i++){
						for(var j = 0; j < exerciseJSON.sessions[i].sets.length; j++){
							currentObject = exerciseJSON.sessions[i].sets[j];

							if(!maxObject){
								maxObject = currentObject;
							}

							if(currentObject.weight >= maxObject.weight){
								if(currentObject.weight === maxObject.weight){
									if((currentObject.weight * currentObject.reps) > (maxObject.weight * maxObject.reps)){
										maxObject = currentObject;
									}
								} else {
									maxObject = currentObject;
								}
							}
						}
					}

					if(chart.dataset.key === 'max'){
						createHtmlText(chart).attr({
								textFormat: "{value} kg" + " - {reps} reps", 
								delaySpeed: delaySpeed += delayAdd,
								decimalPlaces: 1,
								extraFormatKeys: [{
									name: "reps",
									value: maxObject.reps
								}]
							})
							.data(maxObject.weight)
							.call(chart);
					} else {
						var a = moment().endOf('year');
						var b = moment().today;

						maxObject.weight += (a.diff(b, 'weeks') / exerciseJSON.incInterval) * exerciseJSON.increase;

						createHtmlText(chart).attr({
								textFormat: "{value} kg", 
								delaySpeed: delaySpeed += delayAdd,
								decimalPlaces: 1
							})
							.data(2.5 * Math.round(maxObject.weight / 2.5))
							.call(chart);
					}

					setTimeout(function(){
						chart.parentNode.classList.add('async--finished');
					}, delaySpeed);
				}
			});
		});
	}
</script>