{{> header homepage=true}}

{{> banner title="Home" content="A site about nothing useful at all"}}

<main class="container ut-padding">
	<div class="innerContainer ut-highlight--reverse">
		<nav class="ut-tableChildren ut-tableFixed ut-tableSpacing ut-mobileFullChildren ut-marginTop">
			{{#each index.callouts}}
				{{#with (findObjectInArray object=this in=@root.global.navigation key="url")}}
					{{> callout 
						callout--url=url
						callout--icon=icon
						callout--name=name
						callout--text=text
					}}
				{{/with}}
			{{/each}}
		</nav>

		{{#each index.sideCallouts}}
		<div class="contentContainer">
			<h3 class="divider">{{text}}</h3>

			{{#each charts}}
			<div class="ut-tableChildren ut-tableSpacing ut-tableFixed ut-textAlignCenter {{#unless @first}}ut-marginTop{{/unless}}">
				{{#if (isType this 'array')}}
					{{#each this}}
						<div class="callout {{#if ../../classes}}{{../../classes}}{{/if}}">
							<h5 class="ut-noMargin">{{this.exercise}}</h5>
							<p data-chart="{{this.group}}" data-exercise="{{this.exercise}}" data-key={{../../key}} class="ut-noMargin d3-text">{{{@root.global.loading}}}</p>
						</div>
					{{/each}}
				{{else}}
					<div class="callout {{#if ../classes}}{{../classes}}{{/if}}">
						<h5 class="ut-noMargin">{{this.exercise}}</h5>
						<p data-chart="{{this.group}}" data-exercise="{{this.exercise}}" data-key={{../key}} class="ut-noMargin d3-text">{{{@root.global.loading}}}</p>
					</div>
				{{/if}}
			</div>
			{{/each}}
		{{/each}}

			<h3 class="divider">Latest posts</h3>
			<p class="notification notification--missing">No posts found..</p>

			<h3 class="divider">Website status</h3>
			<table class="siteStatus">
			    <tbody>
				    <tr>
			            <th scope="rowgroup">Build status</th>
			            <td></td>
			        </tr>
			        <tr>
			            <th scope="row">Travis CI (<a class="ut-inline externalLink" href="https://travis-ci.org/">Link</a>)</th>
			            <td>Passing</td>
			        </tr>
			        <tr>
			            <th scope="row">Circle CI (<a class="ut-inline externalLink" href="https://circleci.com/">Link</a>)</th>
			            <td>Passing</td>
			        </tr>

			        <tr>
			            <th scope="rowgroup">Testing</th>
			            <td></td>
			        </tr>
			        <tr>
			            <th scope="row">Coverage</th>
			            <td>67%</td>
			        </tr>
			        <tr>
			            <th scope="row">Unit tests (<a class="ut-inline externalLink" href="https://mochajs.org/">Mocha</a>)</th>
			            <td>{{> icon name="ok-circle" class="icon--small"}}</td>
			        </tr>
			        <tr>
			            <th scope="row">Smoke tests (<a class="ut-inline externalLink" href="http://casperjs.org/">CasperJs</a>)</th>
			            <td>{{> icon name="ok-circle" class="icon--small"}}</td>
			        </tr>

			        <tr>
			            <th scope="rowgroup">Browser support</th>
			            <td></td>
			        </tr>
			        <tr>
			            <th scope="row">Chrome</th>
			            <td>{{> icon name="ok-circle" class="icon--small"}}</td>
			        </tr>
			        <tr>
			            <th scope="row">Firefox</th>
			            <td>{{> icon name="ok-circle" class="icon--small"}}</td>
			        </tr>
			        <tr>
			            <th scope="row">Opera</th>
			            <td>{{> icon name="ok-circle" class="icon--small"}}</td>
			        </tr>
			        <tr>
			            <th scope="row">Safari</th>
			            <td>{{> icon name="ok-circle" class="icon--small"}}</td>
			        </tr>
			        <tr>
			            <th scope="row">&gt;= IE 8</th>
			            <td>{{> icon name="ok-circle" class="icon--small"}}</td>
			        </tr>

			        <tr>
			            <th scope="rowgroup">Misc</th>
			            <td></td>
			        </tr>
			        <tr>
			            <th scope="row">Page load speed</th>
			            <td>136ms</td>
			        </tr>
			        <tr>
			            <th scope="row">Page weight</th>
			            <td>322kb</td>
			        </tr>
			        <tr>
			            <th scope="row">Google SEO score</th>
			            <td>86%</td>
			        </tr>
			        <tr>
			            <th scope="row">No javascript fallback</th>
			            <td>{{> icon name="ok-circle" class="icon--small"}}</td>
			        </tr>
			        <tr>
			            <th scope="row">Mobile breakpoints</th>
			            <td>{{> icon name="ok-circle" class="icon--small"}}</td>
			        </tr>
			    </tbody>
			</table>
		</div>
	</div>
</main>

<script type="text/javascript">
	function pageJS(){
		var delaySpeed = 200;
		var delayAdd = 100;

		d3.selectAll('.d3-text').each(function(d, i){
			var chart = this;

			d3.json('media/data/' + this.dataset.chart + '.json', function (err, JSON) {
				if(!err){
				 	var exerciseJSON = JSON.find(function(d, i){
						if(d.exercise === chart.dataset.exercise) {
							return true;
						}
					});

					var maxObject = null;

					for(var i = 0; i < exerciseJSON.sessions.length; i++){
						for(var j = 0; j < exerciseJSON.sessions[i].sets.length; j++){
							currentObject = exerciseJSON.sessions[i].sets[j];

							if(!maxObject){
								maxObject = currentObject;
							}

							if(currentObject.weight >= maxObject.weight){
								if(currentObject.weight === maxObject.weight){
									if((currentObject.weight * currentObject.reps) > (maxObject.weight * maxObject.reps)){
										maxObject = currentObject;
									}
								} else {
									maxObject = currentObject;
								}
							}
						}
					}

					if(chart.dataset.key === 'max'){
						createHtmlText(chart).attr({
								textFormat: "{value} kg" + " - {reps} reps", 
								delaySpeed: delaySpeed += delayAdd,
								decimalPlaces: 1,
								extraFormatKeys: [{
									name: "reps",
									value: maxObject.reps
								}]
							})
							.data(maxObject.weight)
							.call(chart);
					} else {
						var a = moment().endOf('year');
						var b = moment().today;

						maxObject.weight += (a.diff(b, 'weeks') / exerciseJSON.incInterval) * exerciseJSON.increase;

						createHtmlText(chart).attr({
								textFormat: "{value} kg", 
								delaySpeed: delaySpeed += delayAdd,
								decimalPlaces: 1
							})
							.data(2.5 * Math.round(maxObject.weight / 2.5))
							.call(chart);
					}
				}
			});
		});
	}
</script>